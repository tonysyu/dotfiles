snippet params
	Parameters
	----------

snippet returns
	Returns
	-------

snippet attrs
	Attributes
	----------

snippet see
	See Also
	--------

snippet funcs
	Functions
	---------

snippet class
	Classes
	-------

snippet ex
	Examples
	--------

snippet ref
	References
	----------

snippet cm
	from contextlib import contextmanager
snippet cname
	__class__.__name__
snippet pp
	from pprint import pprint as pp
snippet glob
	from glob import glob
snippet pth
	import os.path as pth
snippet np
	import numpy as np
snippet pd
	import pandas as pd
snippet plt
	import matplotlib.pyplot as plt
snippet mpl
	import matplotlib as mpl
snippet sio
	from skimage import io
snippet ndimg
	import scipy.ndimage as ndimg
snippet assert_close
	from numpy.testing import assert_allclose
snippet assert_equal
	from nose.tools import assert_equal
snippet cb
	import cookbook as cb
snippet pylint
	# pylint: disable=${1}
snippet memprof
	from memory_profiler import profile
	@profile
snippet ipy
	from IPython import embed; embed()
snippet ipdb
    import ipdb; ipdb.set_trace()
snippet pdb
    import pdb; pdb.set_trace()
snippet stack
	import traceback; traceback.print_stack()
snippet ishell
	import IPython.frontend.terminal.embed as _e; _e.InteractiveShellEmbed()()
snippet dec
	def wrapper(func):
		# @functools.wraps(func)
		def wrapped(*args, **kwargs):
			val = func(*args, **kwargs)
			return val
		return wrapped
snippet catch_warnings
	with warnings.catch_warnings():
		warnings.simplefilter("ignore")
snippet utf8
	# -*- coding: utf-8 -*-
	from __future__ import unicode_literals

snippet #-
	# -------------------------------------------------------------------------
snippet #=
	# =========================================================================
snippet ##
	# -------------------------------------------------------------------------
	#  ${1} interface
	# -------------------------------------------------------------------------
snippet here
	import os.path as pth
	LOCAL_DIR = pth.dirname(pth.abspath(__file__))

snippet gallery
	import matplotlib.pyplot as plt; plt.rcdefaults()
	from mpltools import style; style.use('gallery')
snippet todo
	# TODO: 
snippet fix
	# FIXME: 
snippet all
	__all__ = ['${1}']
snippet nptest
	if __name__ == '__main__':
	    from numpy import testing
	    testing.run_module_suite()
snippet nose
	if __name__ == '__main__':
	    import nose
	    nose.runmodule()
snippet pytest
	if __name__ == '__main__':
		import pytest
		pytest.main([__file__])
snippet doctest
	if __name__ == '__main__':
	    import doctest
	    doctest.testmod()
snippet argparse
	#!/usr/bin/env python
	"""
	${1:Description}
	"""
	import argparse


	def main():
	    formatter = argparse.ArgumentDefaultsHelpFormatter
	    parser = argparse.ArgumentParser(description=__doc__,
	                                     formatter_class=formatter)
	    parser.add_argument('${2:arg}',
	                        help="${4:help}")
	    parser.add_argument('${5:--kwarg}', default=${6:'value'},
	                        help="${7:help}")

	    args = parser.parse_args()


	if __name__ == '__main__':
	    main()

snippet log
	import logging

	log = logging.getLogger(__name__)
snippet _LOG
	_LOG = logging.getLogger(__name__)


snippet **
	*args, **kwargs):

snippet djbraces
	from braces.views import LoginRequiredMixin, PermissionRequiredMixin
snippet djuser
	from django.contrib.auth.models import User
snippet djlogin
	from django.contrib.auth.decorators import login_required
snippet djforms
	from django import forms
snippet djmodels
	from django.db import models
snippet djmessages
	from django.contrib import messages
snippet djsettings
	from django.conf import settings
snippet djviews
	from django.views.generic import ${1:View}
snippet djdefmigrate
	def ${1:migrate}(apps, schema_editor):
		${2:ModelClass} = apps.get_model('${3:app}', '${4:$2}')
snippet djcontext
	def get_context_data(self, *args, **kwargs):
		context = super(${1}, self).get_context_data(*args, **kwargs)
		return context
snippet ddf
	import django_dynamic_fixture as fixture
snippet G
	from django_dynamic_fixture import G
